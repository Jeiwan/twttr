(ns twttr.middleware
  (:require [clojure.data.json :as json]
            [clojure.java.io :as io]

            [twttr.auth :as auth]
            [byte-streams :as bs]
            [manifold.deferred :as d]))

; The argument to middleware should be a function that takes a handler
; (which turns a request into a response), and returns a function which takes a request,
; potentially modifies that request, runs request through the given handler to get a response,
; and then returns the response, potentially after modifying it.

(defn- parse-json
  "Parse the body of `response` (potentially empty) as a single JSON document,
  and re-attach the full response as metadata."
  [response]
  (with-meta (-> (:body response)
                 (io/reader)
                 (json/read :key-fn keyword :eof-error? false)) response))

(defn wrap-json
  "REST middleware for parsing response body as single JSON document"
  [handler]
  (fn json-middleware-handler [request]
    (d/chain (handler request) parse-json)))

(defn- parse-stream
  "Parse the body of `response` as a sequence of lines of JSON, ignoring empty lines
  (Twitter will send lots of newlines as keep-alive signals if the stream is sparse),
  and re-attach the full response as metadata."
  [response]
  (with-meta (->> (:body response)
                  (bs/to-line-seq)
                  (remove empty?)
                  (map #(json/read-str % :key-fn keyword))) response))

(defn wrap-stream
  "Streaming middleware for parsing response as infinite sequence of JSON documents,
  Twitter will send lots of newlines as keep-alive signals if the stream is sparse
  separated by newlines"
  [handler]
  (fn stream-middleware-handler [request]
    (d/chain (handler request) parse-stream)))

(defn- assoc-auth-header
  "Set the 'Authorization' header in the ring request `req` as generated by
  calling auth-header on the *Credentials instance `credentials`."
  [req credentials]
  {:pre [(satisfies? auth/Credentials credentials)]}
  (let [{:keys [request-method scheme server-name uri form-params query-params]} req
        ; Generate the full URL, except query-params, for the given request.
        request-uri (str (name scheme) "://" server-name uri)
        authorization (auth/auth-header credentials request-method request-uri (merge form-params query-params))]
    (assoc-in req [:headers :Authorization] authorization)))

(defn wrap-auth
  "Authentication-providing middleware. Primarily sets the 'Authorization'
  header on requests."
  [handler credentials]
  (fn auth-middleware-handler [req]
    (handler (assoc-auth-header req credentials))))
